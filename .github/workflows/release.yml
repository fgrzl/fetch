name: Release

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v5
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Run linting
        run: npm run lint:check

      - name: Build project
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0

      - name: Determine Version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.1.0

      - name: Set version outputs
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          new_version="${{ steps.gitversion.outputs.semVer }}"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version will be bumped from $current_version to $new_version"

      - name: Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Update CHANGELOG
        run: |
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new version to CHANGELOG
          sed -i "3i\\## [${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)\\n\\n### Added\\n- New features and enhancements\\n\\n### Changed\\n- Updated dependencies and improvements\\n\\n### Fixed\\n- Bug fixes and patches\\n" CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Merge to main
        run: |
          git checkout main
          git pull origin main
          git merge --no-ff develop -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main

      - name: Create Git tag
        run: |
          git tag -a v${{ steps.version.outputs.new_version }} -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Merge back to develop
        run: |
          git checkout develop
          git pull origin develop
          git merge --no-ff main -m "Merge main back to develop after release v${{ steps.version.outputs.new_version }}"
          git push origin develop

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag
          last_tag=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          if [ -z "$last_tag" ]; then
            last_tag=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Generating release notes from $last_tag to HEAD"

          # Generate release notes
          cat << EOF > release_notes.md
          ## What's Changed

          $(git log --oneline --pretty=format:"- %s (%h)" $last_tag..v${{ steps.version.outputs.new_version }} | head -20)

          ## Bundle Size
          - ESM: $(du -h dist/index.js | cut -f1)
          - CJS: $(du -h dist/cjs/index.js | cut -f1)  
          - ESM (minified): $(du -h dist/index.min.js | cut -f1)
          - CJS (minified): $(du -h dist/cjs/index.min.js | cut -f1)

          ## Installation
          \`\`\`bash
          npm install @fgrzl/fetch@${{ steps.version.outputs.new_version }}
          \`\`\`

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$last_tag...v${{ steps.version.outputs.new_version }}
          EOF

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.version.outputs.new_version }} \
            --title "Release v${{ steps.version.outputs.new_version }}" \
            --notes-file release_notes.md \
            --latest \
            dist/**
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
